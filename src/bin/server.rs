use std::io::prelude::*;
use std::os::unix::net::{UnixListener, UnixStream};
use std::thread;

use extern_execve_poc::*;

fn handle_client(mut stream: UnixStream) {
    let mut buf = Vec::new();
    stream.read_to_end(&mut buf).expect("read_to_end");

    dbg!(std::str::from_utf8(&buf[16..]));

    let mut msg = MessageUnion {
        as_bytes: [0; SIZE_OF_MESSAGE],
    };
    unsafe {
        // SAFETY: access to union field
        msg.as_bytes.as_mut_slice().copy_from_slice(buf.as_slice());
    }

    dbg!(unsafe { msg.as_struct });
}

fn main() -> Result<(), Box<dyn std::error::Error>> {
    let listener = UnixListener::bind("/run/user/1000/extern-execve-poc.sock")?;

    for stream in listener.incoming() {
        match stream {
            Ok(stream) => {
                thread::spawn(|| handle_client(stream));
            }
            Err(err) => {
                eprintln!("{err}");
            }
        }
    }
    Ok(())
}
