use std::io::prelude::*;
use std::os::unix::net::{UnixListener, UnixStream};
use std::thread;

use extern_execve_poc::*;

fn handle_client(mut stream: UnixStream) {
    let mut buf = Vec::new();
    stream.read_to_end(&mut buf).expect("read_to_end");

    let msg = unsafe { Message::from_bytes(&buf) };

    println!(
        "length: {}, mtype: {}, data() as str: {}",
        msg.length,
        msg.mtype,
        std::str::from_utf8(msg.data()).unwrap()
    );
}

fn main() -> Result<(), Box<dyn std::error::Error>> {
    let listener = UnixListener::bind("/run/user/1000/extern-execve-poc.sock")?;

    for stream in listener.incoming() {
        match stream {
            Ok(stream) => {
                thread::spawn(|| handle_client(stream));
            }
            Err(err) => {
                eprintln!("{err}");
            }
        }
    }
    Ok(())
}
