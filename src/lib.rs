use std::mem::size_of;

pub const MSG_DATA_MAX: usize = 4096;

pub const SIZE_OF_MESSAGE: usize = size_of::<Message>();

// TODO: Optimize layout if possible
#[repr(C)]
#[derive(Debug, Clone, Copy)] // need to derive Copy for usage in MessageUnion
pub struct Message {
    pub length: u32,
    pub mtype: u32, // type is a keyword in rust
    pub data: [u8; MSG_DATA_MAX], // using a slice here would become more danger when passing over
                    // the socket.
}
impl Message {
    pub fn as_bytes(&self) -> &[u8] {
        // SAFETY: TODO, REVIEW!
        unsafe { &*(self as *const Message as *const [u8; size_of::<Message>()]) }
    }
}

pub union MessageUnion {
    pub as_struct: Message,
    pub as_bytes: [u8; SIZE_OF_MESSAGE],
}

#[repr(u32)]
pub enum MessageType {
    ExternExecve = 1,
}
